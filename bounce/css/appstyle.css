html, body {
  height:100%;
  width:100%;
  background-color: #111;
  color:#fff;
  text-align:center;
}

/* Sections of Layout
-------------------------------------- */
/* Generic styles for demo purposes
-------------------------------------- */
.container {
  font-family: Helvetica, Arial, sans-serif;
  height:98%;
  width:98%;
}

.container > * {
  background-color: #000;
  padding: 1em;
}

/* Typically, you wouldn't specify a height or min-height on this, instead allowing your actual content (i.e., text, images, etc.) to dictate the height of your content area. But since this example has very minimal content, I've set a min-height to mimic a taller content area. */
.content {
  min-width: 90%;
  min-height: 90%;
  display:block;
  margin:auto;
}

/* Layout is stacked vertically by default (for narrower viewports), so give some breathing room between the sections. */
/* Select all elements where parent is a container */
.container > * {
  margin-bottom: 2%;
}

/* Now let's apply grid for wider viewports. */
@media screen and (min-width: 40em) {
  .container > * {
    margin-bottom: 0;
  }
  /* Define the grid */
  .container {
    display: grid;
    grid-template-columns: 18% 60% 18%;
    grid-gap: 2% 2%;
    grid-template-rows: 10% auto 10%;
  }
  /* Place items on the grid */
  .header {
    grid-column: 1 / span 3;

  }
  .sidebar {
    grid-row-end: span 2;
  }
  .content {
    grid-column: 2;
  }

}
#slidersContainer {
  padding:50px;
}
#slidersContainer >* {
  margin:10px;
}
#mySVGCanvas {
  background-color:#fff;
  box-shadow: 0px 0px 50px 0px #fff;
}

a:visited {
  color:#ddd;
}
a{
  color:#ddd;
}
a:hover {
  color:#fff;
}
a:active {
  color:#999;
}

@keyframes bounce {
  0% {bottom:100px;}
  20% {bottom:0px;}
  40% {bottom:50px;}
  60% {bottom:0px;}
  80% {bottom:25px;}
  100% {bottom:0px;}
}

#letterO {
  bottom:100px;
  position:relative;
  animation-name: bounce;
  animation-duration:3s;
  animation-timing-function:ease-in-out;
  animation-delay:1s;
  animation-fill-mode:forwards;
}